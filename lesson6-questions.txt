Questions for Lesson 6

1. When you enable CRUD operations on a table in the database, you need to add four things
to your Rails application.  When you generate a scaffold, all four are created.What are they?

  Model, controller, views, routes

2. When you specify a route in config/routes.rb, you need to include certain information.  What
must be included? In addition, you may specify an additional parameter to create a variable
that describes the route.  How do you do that? What variable is created?

  You must include the CRUD operation to be performed, the path, and specify the controller and action. You can create a route helper by doing something like  as: 'user_logon' which can be used in the views or controller as user_logon_path or user_logon_url.

3. What does the Rails db:migrate command do?

  This command updates the database structure based on the db/migrate files.

4. What file do you look at to see the current database schema?

  db/schema.rb

5. What command shows the routes?

  bin/rails routes

6. How can you start the Rails console? How can you do CRUD operations from the console?

  rails console or rails c. An example of a Crud operation that can be done from the console is 
    user = User.find_by(id: 1)
    user.destroy

7. What statements are in erb files that make them different from html files?  What are the
two kinds of special statements, and how are they marked in the erb file? Where are they executed?

  Embedded ruby code. There are two kinds, ones that start with <% and <%=. The first is for conditional statements and loops. It does not execute anything. The second generate output, the result of which is inserted into the HTML.

8. Consider this statement: @forum = Forum.new().  Why is Forum capitalized?  Why is @forum not
capitalized? Why is the @ used?

  @forum is not capitalized because it is an instance variable. The @ is needed to distinguish that this is an instance variable and scoped into the object they belong to. Forum is capitalized because it is a class. 

9. Consider these statements:

@forum = Forum.new(...)
@forum =Forum.create(...)
@forum.save(...)

What is the difference between Forum.new() and Forum.create()?  Why can't you do Forum.save(...)?

 Forum.new() creates a new instance of the Forum class but doesn't save it to the db. Forum.create() creates a new instance of the Forum class AND saves it to the db. @forum.save() is called on an object that was already created with Forum.new and saves it to the db. Save cannot be called on Forum because it's not a class method.

10. In the forums controller, you have a method called show:

  def show
  end

This is an action method.  It is an action method for only one reason: There is a route
that points to it.  But there's nothing in the method!  It will do the right things
because the default behavior does what is needed.  What does the default behavior
do?  How does it know which forum to show?  Whenever you have an action method, there
is a hash called params that is passed to that method.  And, in this case, the params
hash has a value, params[:id].  What is the value for this element of the hash? How
did it get there?

  The default behavior is to use the id in the URL to query the database and display the matching record from the Forum model. The value for this element would come from the URL when the request is made. The value would correspond to the id of the forum post.  




