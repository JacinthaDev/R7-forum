Questions for Lesson 7

1. What method do you put in the top of a controller so that something happens
before some or all of the controller actions execute?  Where can you put that
change so that it affects all controllers?

    before_action:, if you want it to affect all controllers you put it in the parent controller, Application Record from which all other classes inherit.




2. Consider the following statement:

bin/rails generate model subscription forum:references user:references priority:integer

This creates several files, including two you need to know about.  What are they?
After you do this statement but before starting the rails server, you have to do another
command.  What is that command?

    This creates a timestamped migration file and a model file for subscriptions. 
    bin/rails db migrate




3. What table is created as a result of the migration described above? What are the column
names in that table? What is the primary key? What are the foreign keys?  What does a 
foreign key do?


      The subscription table. The names of the columns are  forum_id, user_id, and priority. The primary key is autogenerated by rails and gives each record an id. The foreign keys          are user_id and forum_id which come reference the id in the user and forum table respectively and help to associate a subscription with a user or forum



4. You have the following lines in the Subscription model:

belongs_to :user
belongs_to :forum

Because of this, you have several additional methods added to the Subscription class.  This means
that if you have a @subscription (an instance of Subscription), you have a couple of methods
used to refer to associated database methods.  What are those methods?  (Actually there are a few,
but there are two in particular you should know.)

      The methods @subscription.user and @subscription.forum are available because of the belongs_to associations in the Subscription model. These methods are used to retrieve the           associated User and Forum objects related to a specific subscription.



5. You have the following lines in the User model.

has_many :subscriptions
has_many :posts
has_many :forums, through: :subscriptions

What are three important methods that are available to instances of the user model because
of these lines?

      The subscriptions, posts, and forums methods allow you to retrieve related records associated with a user. These methods are available because of the has_many and has_many             :through associations defined in the User model.





6. Suppose that user is an instance of the User class. What kind of object is returned by
user.subcriptions?  Hint: To find out, go into the Rails console for your application.
Then do:

user=User.first
subscriptions = user.subscriptions
subscriptions.class

The second call returns what looks like an empty array -- but it isn't
of the Array class. This is important, because you can do, for 
example:

new_subscription = subscriptions.new

or

new_subscription = user.subscriptions.new

Try that last line.  You will see that it creates a subscription object, but that
object is not entirely empty.  Which attribute is set? Where does it get that
value?



        user.subscriptions returns an ActiveRecord::Associations::CollectionProxy object.
        When you create a new subscription through user.subscriptions.new, Rails knows that the new subscription should belong to the user, so it sets the user_id automatically.



7. Suppose that user is an instance of User, and forum is an instance of Forum.  What
Active Record Statement could you use to retrieve all the user's posts for that
forum?  Hint: You need to have a where in your statement. Try this out in the console.
You will see the SQL that is executed logged to the screen.  What is that SQL?

    You could use users.post.where(forum_id: forum.id)
    SELECT "posts".* FROM "posts" WHERE "posts"."user_id" = ? AND "posts"."forum_id" = ?


8. You have the following method in your posts controller:

  def destroy
    @forum = @post.forum
    @post.destroy
    redirect_to @forum, notice: "Your post was deleted."
  end

There is a security exposure, a risk that a hacker could do damage.  What is that
risk? What two things are done in your code to prevent the risk?


    The destroy method allows a post to be deleted without checking if the current user has the right to delete that post. Two security measures in the code are the check_access           method which ensures that only the owner of the post can edit or delete it. y ensuring that the user_id parameter is set to the session[:current_user]. The other is                    post_params method which assures that the user_id of the post (the user who created the post) is the same person currently logged in (whose id is stored in the session).



9. The routes for subscriptions are nested under the forum routes.  How does this
change the routes?  What is the additional hash key and value that is passed in the
params hash to the subscriptions controller as a result of this nesting? Which routes
are unaffected by the nesting?

    This changes the routes because every subscription action except GET will need the :forum_id in its URL. Because of nesting the params hash will include a key-value pair for           forum_id.
    For example for /forums/1/subscriptions/3, the params hash will be:
                  {
                    forum_id: '1',   <-- forum ID
                    id: '5'          <-- subscription ID
                  }
    Standalone routes (like the user routes and GET for subscriptions) that are not nested under forums remain unchanged.





10. Every action method must do exactly one of two things -- that is, each
method may do all sorts of logic, but at the end, it has to do one of two
things, depending on the outcome of the logic.  What are those two things?

        It has to render a view or redirect the user.





